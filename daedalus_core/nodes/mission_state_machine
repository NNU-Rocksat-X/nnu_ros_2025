#! /usr/bin/python

#
# Misison State Machine
#
# @brief This is the high level mission state machine. Dictates the mission 
#        timeline. Links the sub-state machines in the right order. 
#
# @author Riley Mark 
# @author Febuary 27, 2025
# 
#*******************************************************************************

import rospy
import smach
import smach_ros

from daedalus_core.pcs_move_states import *
from daedalus_core.pcs_states import *

class Mission_SM:
    def __init__(self):
        self.sm = smach.StateMachine(outcomes=["Mission_Success", "Mission_Fail"])

        self.mission_sm()
        
    def mission_sm(self):
        with self.sm:


            #smach.StateMachine.add('inhibit_detect',
            #                       Check_Inhibit(),
            #                       transitions={'full_inhibit': 'Mission_Success',
            #                                    'partial_inhibit': 'Mission_Success',
            #                                    'no_inhibit': 'wait_0'})

            #smach.StateMachine.add('wait_0', 
            #                       Wait_State(5),
            #                       transitions={'Complete': 'unfold'}) 

            # TODO: add service for zeroing the arm

            smach.StateMachine.add('unfold', 
                                   unfold_sm,
                                   transitions={'Success': 'wait_1',
                                                'Fail': 'Mission_Fail'}) 

            smach.StateMachine.add('wait_1', 
                                   Wait_State(5),
                                   transitions={'Complete': 'fold'}) 

            smach.StateMachine.add('fold', 
                                   fold_sm,
                                   transitions={'Success': 'Mission_Success',
                                                'Fail': 'Mission_Fail'}) 

    def run(self):
        outcome = self.sm.execute()


if __name__ == "__main__":
    rospy.init_node("mission_sm")
    sm = Mission_SM()
    print("Begin Run SM")
    sm.run()
